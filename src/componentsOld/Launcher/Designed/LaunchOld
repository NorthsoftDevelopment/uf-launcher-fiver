const launchOLD = () => {



        Swal.fire({
            title: '',
            html: 'Espere un momento...',
            allowOutsideClick: false,
            timerProgressBar: false,
            background: 'transparent',
            showConfirmButton: false,
            showCancelButton: true,
            cancelButtonColor: "rgb(0, 55, 255)",
            cancelButtonText: 'Cancelar',
            customClass: {
                container: 'title-loader',
                popup: 'title-loader',
                header: 'title-loader',
                title: 'title-loader',
            },


            willOpen: async () => {
                Swal.showLoading();

                const fs = require('fs');
                const path = require('path');

                const folderPath = 'C:/InhoniaLauncher/Instance/1';
                fs.mkdirSync(path.dirname(folderPath), { recursive: true });

                const { Client, Authenticator } = require('minecraft-launcher-core');
                const launcher = new Client();

                const { Auth } = require("msmc");

                const authManager = new Auth("select_account");

                authManager.launch("raw").then(async xboxManager => {

                    const token = await xboxManager.getMinecraft();

                    let optsAuth = {

                        authorization: token.mclc(),
                        removePackage: true,
                        overrides: {
                            detached: false,
                        },

                    };

                    let opts = { ...optsAuth, ...LaunchInstance };


                    launcher.launch(opts);

                    launcher.on('debug', (e) => console.log(e));
                    launcher.on('data', (e) => console.log(e));
                    launcher.on('progress', (e) => {

                        var progress = e;

                        var progressBar = document.getElementById('progress-bar');
                        var progressText = document.getElementById('progress-text');

                        var porcentaje = Math.floor((progress.task / progress.total) * 100);

                        progressBar.style.width = porcentaje + '%';
                        progressText.innerText = porcentaje + '%';



                    });
                    launcher.on('data', (e) => {
                        document.getElementById("status").textContent = e;
                        document.getElementById("status-content").style.display = "flex";
                    });

                    launcher.on('debug', (e) => {
                        const descargaLabel = document.getElementById('descarga');

                        document.getElementById("download-screen").style.display = "flex";

                        const currentContent = descargaLabel.textContent;

                        // Agrega el nuevo log al contenido existente con una nueva línea
                        descargaLabel.textContent = currentContent + (currentContent ? "\n" : "") + e;

                        Swal.close();

                    });
                    launcher.on('close', (e) => {
                        document.getElementById("status").textContent = null;
                        document.getElementById("status-content").style.display = "none";

                    });



                });

            },
            willClose: () => {


            }
        });


    };


    const launch2 = () => {

        Swal.fire({
            title: '',
            html: 'Espere un momento...',
            allowOutsideClick: false,
            timer: 2000,
            timerProgressBar: false,
            background: 'transparent',
            showConfirmButton: false,
            showCancelButton: true,
            cancelButtonColor: "rgb(0, 55, 255)",
            cancelButtonText: 'Cancelar',
            customClass: {
                container: 'title-loader',
                popup: 'title-loader',
                header: 'title-loader',
                title: 'title-loader',
            },


            willOpen: async () => {
                Swal.showLoading();

                const fs = require('fs');
                const path = require('path');

                console.log(otherOpts.root);

                const folderPath = otherOpts.root;
                fs.mkdirSync(path.dirname(folderPath), { recursive: true });

                const { Client, Authenticator } = require('minecraft-launcher-core');

                const username = document.getElementById('username').value;
                const launcher = new Client();

                let optsAuth = {

                    authorization: Authenticator.getAuth(username),
                    removePackage: true,
                    overrides: {
                        detached: false,
                    },

                };

                let opts = { ...optsAuth, ...otherOpts };


                launcher.launch(opts);

                launcher.on('debug', (e) => console.log(e));
                launcher.on('data', (e) => console.log(e));
                launcher.on('progress', (e) => {

                    var progress = e;

                    var progressBar = document.getElementById('progress-bar');
                    var progressText = document.getElementById('progress-text');

                    var porcentaje = Math.floor((progress.task / progress.total) * 100);

                    progressBar.style.width = porcentaje + '%';
                    progressText.innerText = porcentaje + '%';



                });
                launcher.on('data', (e) => {
                    document.getElementById("status").textContent = e;
                    document.getElementById("status-content").style.display = "flex";
                });

                launcher.on('debug', (e) => {
                    const descargaLabel = document.getElementById('descarga');

                    document.getElementById("download-screen").style.display = "flex";

                    const currentContent = descargaLabel.textContent;

                    // Agrega el nuevo log al contenido existente con una nueva línea
                    descargaLabel.textContent = currentContent + (currentContent ? "\n" : "") + e;

                    Swal.close();

                });
                launcher.on('close', (e) => {
                    document.getElementById("status").textContent = null;
                    document.getElementById("status-content").style.display = "none";

                });


            },
            willClose: () => {


            }
        });


    };